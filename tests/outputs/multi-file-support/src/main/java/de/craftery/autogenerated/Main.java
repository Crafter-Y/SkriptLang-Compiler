package de.craftery.autogenerated;

import de.craftery.autogenerated.command.AcCommand;
import de.craftery.autogenerated.command.DiamondCommand;
import de.craftery.autogenerated.command.OddsCommand;
import de.craftery.autogenerated.command.RankCommand;
import de.craftery.autogenerated.command.SetspawnCommand;
import de.craftery.autogenerated.command.SpawnCommand;
import de.craftery.autogenerated.command.StaffannounceCommand;
import de.craftery.autogenerated.listener.OnClick2;
import de.craftery.autogenerated.listener.OnEnchant21;
import de.craftery.autogenerated.listener.OnEnchantPrepare20;
import java.util.HashMap;
import java.util.Map;
import org.bukkit.Bukkit;
import org.bukkit.command.PluginCommand;
import org.bukkit.event.Listener;
import org.bukkit.plugin.java.JavaPlugin;

public final class Main extends JavaPlugin {
    private static Main instance;
    private static final Map<String, Map<String, Long>> cooldowns = new HashMap<>();
    private static final Map<String, Object> variableStore = new HashMap<>();

    @Override
    public void onEnable() {
        instance = this;
        new OnClick2();
        PluginCommand acCommand = Bukkit.getPluginCommand("ac");
        if (acCommand != null) {
            acCommand.setExecutor(new AcCommand());
        }
        PluginCommand staffannounceCommand = Bukkit.getPluginCommand("staffannounce");
        if (staffannounceCommand != null) {
            staffannounceCommand.setExecutor(new StaffannounceCommand());
        }
        PluginCommand diamondCommand = Bukkit.getPluginCommand("diamond");
        if (diamondCommand != null) {
            diamondCommand.setExecutor(new DiamondCommand());
        }
        new OnEnchantPrepare20();
        new OnEnchant21();
        PluginCommand oddsCommand = Bukkit.getPluginCommand("odds");
        if (oddsCommand != null) {
            oddsCommand.setExecutor(new OddsCommand());
        }
        PluginCommand rankCommand = Bukkit.getPluginCommand("rank");
        if (rankCommand != null) {
            rankCommand.setExecutor(new RankCommand());
        }
        PluginCommand setspawnCommand = Bukkit.getPluginCommand("setspawn");
        if (setspawnCommand != null) {
            setspawnCommand.setExecutor(new SetspawnCommand());
        }
        PluginCommand spawnCommand = Bukkit.getPluginCommand("spawn");
        if (spawnCommand != null) {
            spawnCommand.setExecutor(new SpawnCommand());
        }
    }
    
    @Override
    public void onDisable() {
        PluginCommand acCommand = Bukkit.getPluginCommand("ac");
        if (acCommand != null) {
            acCommand.setExecutor(null);
        }
        PluginCommand staffannounceCommand = Bukkit.getPluginCommand("staffannounce");
        if (staffannounceCommand != null) {
            staffannounceCommand.setExecutor(null);
        }
        PluginCommand diamondCommand = Bukkit.getPluginCommand("diamond");
        if (diamondCommand != null) {
            diamondCommand.setExecutor(null);
        }
        PluginCommand oddsCommand = Bukkit.getPluginCommand("odds");
        if (oddsCommand != null) {
            oddsCommand.setExecutor(null);
        }
        PluginCommand rankCommand = Bukkit.getPluginCommand("rank");
        if (rankCommand != null) {
            rankCommand.setExecutor(null);
        }
        PluginCommand setspawnCommand = Bukkit.getPluginCommand("setspawn");
        if (setspawnCommand != null) {
            setspawnCommand.setExecutor(null);
        }
        PluginCommand spawnCommand = Bukkit.getPluginCommand("spawn");
        if (spawnCommand != null) {
            spawnCommand.setExecutor(null);
        }
    }
    
    public static Main getInstance() {
        return instance;
    }
    
    public static Long getCooldown(String sender, String command) {
        if (cooldowns.get(command) == null) {
            return 0L;
        } else if (cooldowns.get(command).get(sender) == null) {
            return 0L;
        } else {
            return cooldowns.get(command).get(sender);
        }
    }
    
    public static void setCooldown(String sender, String command, Long cooldown) {
        Map<String, Long> commandMap = cooldowns.get(command);
        if (commandMap == null) commandMap = new HashMap<>();
        commandMap.put(sender, System.currentTimeMillis() + cooldown);
        cooldowns.put(command, commandMap);
    }
    
    public static void setVariable(String key, Object value) {
        variableStore.put(key, value);
    }
    
    public static Object getVariable(String key) {
        return variableStore.get(key);
    }
    
    public static void deleteVariable(String key) {
        variableStore.remove(key);
    }
    
    public static void registerEvent(Listener event) {
        Main.getInstance().getServer().getPluginManager().registerEvents(event, Main.getInstance());
    }
    
}

